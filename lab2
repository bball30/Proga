Main1.java
import ru.ifmo.se.pokemon.*;

public class Main1 {

    public static void main(String[] args){
        Battle b = new Battle();
        b.addAlly(new Mew("tom", 1));
        b.addAlly(new Koffing("biba", 20));
		b.addAlly(new Weezing("boba", 20));
		b.addFoe(new Seedot("chip", 1));
		b.addFoe(new Nuzleaf("dale", 9));
		b.addFoe(new Shiftry("jerry", 1));
        b.go();
    }
}

Mew.java
import ru.ifmo.se.pokemon.*;

public class Mew extends Pokemon{

    public  Mew(String name, int level){
       super(name, level);
	   setStats(100, 100, 100, 100, 100, 100);
	   setType(Type.PSYCHIC);
	   setMove(new ThunderWave(), new XScissor(), new ShadowClaw(), new RockSlide());
    }
}

Koffing.java
import ru.ifmo.se.pokemon.*;

public class Koffing extends Pokemon{

    public  Koffing(String name, int level){
       super(name, level);
	   setStats(40, 65, 95, 60, 45, 35);
	   setType(Type.POISON);
	   setMove(new ShadowBall(), new Sludge(), new Rest());
    }
}

Weezing.java
import ru.ifmo.se.pokemon.*;

public class Weezing extends Koffing{

    public  Weezing(String name, int level){
       super(name, level);
	   setStats(65, 90, 120, 85, 70, 60);
	   setType(Type.POISON);
	   setMove(new ShadowBall(), new Sludge(), new Rest(), new DoubleHit());
    }
}

Seedot.java
import ru.ifmo.se.pokemon.*;

public class Seedot extends Pokemon{

    public  Seedot(String name, int level){
       super(name, level);
	   setStats(40, 40, 50, 30, 30, 30);
	   setType(Type.GRASS);
	   setMove(new Swagger(), new Confide());
    }
}

Nuzleaf.java
import ru.ifmo.se.pokemon.*;

public class Nuzleaf extends Seedot{

    public  Nuzleaf(String name, int level){
       super(name, level);
	   setStats(70, 70, 40, 60, 40, 60);
	   setType(Type.POISON, Type.DARK);
	   setMove(new Swagger(), new Confide(), new Growth());
    }
}

Shiftry.java
import ru.ifmo.se.pokemon.*;

public class Shiftry extends Nuzleaf{

    public  Shiftry(String name, int level){
       super(name, level);
	   setStats(90, 100, 60, 90, 60, 80);
	   setType(Type.POISON, Type.DARK);
	   setMove(new Swagger(), new Confide(), new Growth(), new BrutalSwing());
    }
}

Attacks.java
import ru.ifmo.se.pokemon.*;

class ThunderWave extends StatusMove{
    protected  ThunderWave(){
       super(Type.ELECTRIC, 0, 90);
    }
	@Override
	protected void applyOppEffects(Pokemon p){
	   Effect.paralyze(p);
	}	
	@Override
	protected String describe(){
		return "применяет атаку Thunder Wave";
	}
}

class XScissor extends PhysicalMove{
	protected XScissor(){
		super(Type.BUG, 80, 100);
	}
	@Override
	protected String describe(){
		return "применяет атаку X-Scissor";
	}
}

class ShadowClaw extends PhysicalMove{
    protected ShadowClaw(){
       super(Type.GHOST, 70, 100);
    }
	@Override
	protected double calcCriticalHit(Pokemon att, Pokemon def){
	  if(Math.random() < att.getStat(Stat.SPEED)*3/512)
		  return 2;
	  return 1;
	}	
	@Override
	protected String describe(){
		return "применяет атаку Shadow Claw";
	}
}

class RockSlide extends PhysicalMove{
    protected RockSlide(){
       super(Type.ROCK, 75, 90);
    }
	@Override
	protected void applyOppEffects(Pokemon p){
	  if(Math.random() <= 0.3) Effect.flinch(p);
	}	
	@Override
	protected String describe(){
		return "применяет атаку Rock Slide";
	}
}


class ShadowBall extends SpecialMove{
    protected ShadowBall(){
        super(Type.GHOST, 80, 100);
    }
    @Override
    protected void applyOppEffects(Pokemon p){
        if (Math.random() <= 0.2) p.setMod(Stat.SPECIAL_DEFENSE, -1);
    }
	@Override
	protected String describe(){
		return "применяет атаку Shadow Ball";
	}
}

class Sludge extends SpecialMove{
    protected Sludge(){
        super(Type.POISON, 65, 100);
    }
    @Override
    protected void applyOppEffects(Pokemon p){
        if (Math.random() <= 0.3) Effect.poison(p);
    }
	@Override
	protected String describe(){
		return "применяет атаку Sludge";
	}
}

class Rest extends StatusMove {
    protected Rest(){
        super(Type.PSYCHIC, 0, 0);
    }
    @Override
    protected boolean checkAccuracy(Pokemon att, Pokemon def) {
    return true;
    }
    @Override
    protected void applySelfEffects(Pokemon p){
       p.setMod(Stat.HP, (int) (p.getHP() - p.getStat(Stat.HP)));
       p.setCondition(new Effect().condition(Status.SLEEP).attack(0.0).turns(3));
    }
	@Override
	protected String describe(){
		return "применяет атаку Rest";
	}
}

class DoubleHit extends PhysicalMove{
    protected DoubleHit(){
       super(Type.NORMAL, 35, 90, 1, 2);
    }
	@Override
	protected void applyOppEffects(Pokemon p){
	  if(Math.random() <= 0.3) Effect.flinch(p);
	}
	@Override
	protected String describe(){
		return "применяет атаку Double Hit";
	}
}


class Swagger extends StatusMove{
    protected Swagger(){
        super(Type.NORMAL, 0, 85);
    }
    @Override
    protected void applyOppEffects(Pokemon p){
    p.setMod(Stat.ATTACK, 2);
    Effect.confuse(p);
    }
	@Override
	protected String describe(){
		return "применяет атаку Swagger";
	}
}

class Confide extends StatusMove {
    protected Confide(){
        super(Type.NORMAL, 0, 0);
    }
    @Override
    protected void applyOppEffects(Pokemon p){
        p.setMod(Stat.SPECIAL_ATTACK, -1);
    }
	@Override
	protected String describe(){
		return "применяет атаку Confide";
	}
}

class Growth extends StatusMove{
    protected Growth(){
       super(Type.NORMAL, 0, 0);
    }
	@Override
	protected void applySelfEffects(Pokemon p){
	  p.setMod(Stat.SPECIAL_ATTACK, 1);
	  p.setMod(Stat.ATTACK, 1);
	}	
	@Override
	protected String describe(){
		return "применяет атаку Growth";
	}
}

class BrutalSwing extends PhysicalMove{
    protected BrutalSwing(){
       super(Type.DARK, 60, 100);
    }
	@Override
	protected String describe(){
		return "применяет атаку Brutal Swing";
	}
}
